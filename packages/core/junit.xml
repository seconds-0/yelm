<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="817" failures="0" errors="0" time="3.024073708">
    <testsuite name="src/index.test.ts" timestamp="2025-07-17T20:01:55.522Z" hostname="Alexanders-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0.00188">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.00124325">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-07-17T20:01:55.522Z" hostname="Alexanders-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.003750292">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001849542">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000113042">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000073458">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000105625">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000051042">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.000064917">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000050834">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000062041">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000275708">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000057875">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.000038958">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-07-17T20:01:55.523Z" hostname="Alexanders-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.034961833">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.022457416">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.002637875">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.005554292">
            <system-out>
Loaded cached credentials.

            </system-out>
            <system-err>
Error retrieving user info: TypeError: Cannot read properties of undefined (reading &apos;filter&apos;)
    at cacheGoogleAccount [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/user_account.ts:52:31[90m)[39m
    at fetchAndCacheUserInfo [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/code_assist/oauth2.ts:359:7[90m)[39m
    at Module.getOauthClient [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/code_assist/oauth2.ts:86:9[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/code_assist/oauth2.test.ts:283:7
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.000957792">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.000615375">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.000716958">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.001220917">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-07-17T20:01:55.523Z" hostname="Alexanders-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.010655708">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.001473625">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.002458458">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.000992042">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.000610333">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.000781458">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.000428167">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.003119667">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-07-17T20:01:55.524Z" hostname="Alexanders-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003270917">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should use GOOGLE_CLOUD_PROJECT when set" time="0.001951208">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should treat empty GOOGLE_CLOUD_PROJECT as undefined and use project from server" time="0.000337541">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.000391458">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-07-17T20:01:55.524Z" hostname="Alexanders-MacBook-Pro.local" tests="23" failures="0" errors="0" skipped="0" time="0.03646825">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.012887833">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.001873166">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.001295292">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.000519">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.001098084">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000522334">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000370875">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.001098791">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.001702792">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000454958">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000371583">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000297458">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000391417">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.000293">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000275083">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.000284875">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.0002545">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.00575075">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000550125">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.003352">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000647959">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should update memory and file count on successful refresh" time="0.000805083">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should propagate errors from loadServerHierarchicalMemory" time="0.000461708">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-07-17T20:01:55.525Z" hostname="Alexanders-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0.022272542">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should update the model and mark as switched during session" time="0.012023791">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should handle multiple model switches during session" time="0.000758667">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.002319125">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.001464417">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fallback to initial model if contentGeneratorConfig is not available" time="0.000815875">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should start as false for new session" time="0.000676375">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should remain false if no model switch occurs" time="0.001354417">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should persist switched state throughout session" time="0.000403541">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should reset model to default and clear session switch flag" time="0.000457333">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should handle case where contentGeneratorConfig is not initialized" time="0.001129167">
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-07-17T20:01:55.525Z" hostname="Alexanders-MacBook-Pro.local" tests="31" failures="0" errors="0" skipped="0" time="0.057393125">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.001845459">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000142875">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.000096042">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.00003475">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.000029834">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.000035083">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.0000635">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.014032292">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.006262541">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.000698916">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.000476166">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.000526375">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.000493333">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.000427917">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.000541875">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.003213917">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.00103125">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0.004104833">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.000848583">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.000833167">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.000604084">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.0008335">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.000732333">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.000580792">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.00069825">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.006449334">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.001234541">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.002955917">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.001461709">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.000925625">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.0033535">
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-07-17T20:01:55.527Z" hostname="Alexanders-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.190253375">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.000888208">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.000964666">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.186719375">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.000243">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.000178459">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.000201667">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.000179583">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-07-17T20:01:55.527Z" hostname="Alexanders-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.006214125">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.002700083">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.001835083">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000092666">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000132708">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.00004625">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.000060125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000083042">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000049875">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000205166">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000044125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.000034541">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.000034791">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000033292">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-07-17T20:01:55.528Z" hostname="Alexanders-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.010023459">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.003477708">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.000482084">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000220459">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.000241875">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.000262583">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.000161375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.000138416">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.000224375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.000995459">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.000222958">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.00021525">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.000167208">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.000199292">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.000133209">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.000137208">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.000585583">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.000209">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.000174041">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.00014">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000149542">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000139625">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-07-17T20:01:55.529Z" hostname="Alexanders-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.002371208">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000698125">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.000139042">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.000048041">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.000039292">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000077958">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.000041083">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.000037959">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.000033625">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.000237083">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000040792">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.000080875">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.00002975">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-07-17T20:01:55.529Z" hostname="Alexanders-MacBook-Pro.local" tests="22" failures="0" errors="0" skipped="0" time="0.153056583">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.025416041">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.012700167">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.013395792">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.01022125">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.007763208">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.006169625">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.005213125">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.015666417">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.003219375">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.009202209">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.005530167">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.006992584">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.0029305">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.001858666">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint to a tagged file when a tag is provided" time="0.005450958">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.002894291">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a tagged checkpoint file when a tag is provided" time="0.002047959">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.00526325">
            <system-err>
Failed to read or parse checkpoint file /Users/alexanderhuth/.gemini/tmp/afd7c05dd26c5bfc25be07dc849ef19b2273f5a67d3ade9bdca0a1de85300251/checkpoint-non-existent-tag.json: Error: ENOENT: no such file or directory, open &apos;/Users/alexanderhuth/.gemini/tmp/afd7c05dd26c5bfc25be07dc849ef19b2273f5a67d3ade9bdca0a1de85300251/checkpoint-non-existent-tag.json&apos;
[90m    at open (node:internal/fs/promises:634:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1238:14)[39m
    at Logger.loadCheckpoint [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/core/logger.test.ts:456:22
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/Users/alexanderhuth/.gemini/tmp/afd7c05dd26c5bfc25be07dc849ef19b2273f5a67d3ade9bdca0a1de85300251/checkpoint-non-existent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.002031334">
            <system-err>
Failed to read or parse checkpoint file /Users/alexanderhuth/.gemini/tmp/afd7c05dd26c5bfc25be07dc849ef19b2273f5a67d3ade9bdca0a1de85300251/checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;/Users/alexanderhuth/.gemini/tmp/afd7c05dd26c5bfc25be07dc849ef19b2273f5a67d3ade9bdca0a1de85300251/checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:634:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1238:14)[39m
    at Logger.loadCheckpoint [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/core/logger.test.ts:462:22
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/Users/alexanderhuth/.gemini/tmp/afd7c05dd26c5bfc25be07dc849ef19b2273f5a67d3ade9bdca0a1de85300251/checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.00237725">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.002806958">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.002424667">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-07-17T20:01:55.530Z" hostname="Alexanders-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.005037958">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.002821166">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.00081125">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.000248333">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.000292541">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.000222666">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-07-17T20:01:55.531Z" hostname="Alexanders-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.004308625">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.001975583">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.000276459">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000140125">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000127459">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.0002335">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.00011175">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000087625">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000086791">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.000522666">
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.ts" timestamp="2025-07-17T20:01:55.531Z" hostname="Alexanders-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.005279292">
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.001196625">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield content events for text parts" time="0.001553959">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.000513959">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.00027475">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.00034525">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.000394">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.000210417">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-07-17T20:01:55.531Z" hostname="Alexanders-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.004218167">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default" time="0.001863458">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not initialize git ignore parser when not a git repo" time="0.000214625">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored files by default" time="0.000317">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.000189584">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.000090708">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return true for git-ignored files" time="0.000135125">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return false for non-ignored files" time="0.00012725">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.000201792">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.000234917">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-07-17T20:01:55.532Z" hostname="Alexanders-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.006982375">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance if projectRoot is a Git repository" time="0.001274708">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.0004215">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.000145375">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.000230625">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.000300042">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.001666084">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.000559417">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.000182792">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.000229792">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.000202375">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.000196">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.000527625">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.000115083">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-07-17T20:01:55.533Z" hostname="Alexanders-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.023403333">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.01487525">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.000721834">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.000271084">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.000826333">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.000450083">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.00024975">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.000207917">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.001794209">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.001916959">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.000319375">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000254834">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.000257792">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.000223875">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-07-17T20:01:55.533Z" hostname="Alexanders-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0.060685833">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.012328875">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.00624075">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.006938833">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.009408583">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.00463875">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.007122916">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.006542875">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.00610875">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-07-17T20:01:55.534Z" hostname="Alexanders-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.006495166">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.004520875">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.001415208">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-07-17T20:01:55.534Z" hostname="Alexanders-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.005844">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001181292">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.000685458">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000136542">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000072625">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000176625">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000110792">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000054083">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.000555584">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000260292">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.000062584">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.000065375">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.001059">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.000393375">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-07-17T20:01:55.535Z" hostname="Alexanders-MacBook-Pro.local" tests="29" failures="0" errors="0" skipped="0" time="0.078160625">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.002281583">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.000449125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.000570792">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.000409292">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000414416">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.021481791">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.002371542">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001092625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.001856583">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.006544625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.00988675">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.008300291">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.001477209">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.001954625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.001315833">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.001711125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.00162875">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.001583583">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.001841208">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.001766542">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.001216375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.001002708">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.001234833">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001047667">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.002161791">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.000457541">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.000343041">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.00031425">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.000306208">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-07-17T20:01:55.536Z" hostname="Alexanders-MacBook-Pro.local" tests="27" failures="0" errors="0" skipped="0" time="1.364514417">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.07922325">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.059141167">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.060070542">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.133083375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.063498334">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.064896625">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.065100333">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.064685958">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.06276625">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.065505833">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.063758">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.068098792">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.058700542">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.064080208">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.059500209">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.059310666">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.066105083">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.063779375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.069195875">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.065288042">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.0066785">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000094375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000121459">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000041833">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000096584">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000380542">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.00004975">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-07-17T20:01:55.537Z" hostname="Alexanders-MacBook-Pro.local" tests="20" failures="0" errors="0" skipped="0" time="0.167347958">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.022590291">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.006223209">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.005525833">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.002350959">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.004975583">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.021300375">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.005038458">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.016047">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.012986333">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.009346625">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.008051542">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.006188209">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.007564709">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.009027833">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.004334709">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.004717584">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.004906584">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.006716958">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.004883334">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.002980334">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-07-17T20:01:55.538Z" hostname="Alexanders-MacBook-Pro.local" tests="26" failures="0" errors="0" skipped="0" time="0.007361958">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverTools &gt; should discover tools" time="0.0012985">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.000458">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.00069025">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.000561125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.000336625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.000217">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.000118208">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.000148791">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.000902459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should return a valid name for a simple function" time="0.000151042">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should prepend the server name" time="0.000066084">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should replace invalid characters with underscores" time="0.000062875">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should truncate long names" time="0.0000715">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with only invalid characters" time="0.000059292">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are already valid" time="0.000066375">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with leading/trailing invalid characters" time="0.000101458">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 63 characters long" time="0.000074791">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 64 characters long" time="0.000068625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are longer than 64 characters" time="0.000068084">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.000077167">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.000064625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000069916">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.000072208">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.000061167">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.000061292">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.000527208">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-07-17T20:01:55.540Z" hostname="Alexanders-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.004833541">
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (non-generic server)" time="0.001252833">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (generic &quot;mcp&quot; server)" time="0.000073708">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000097583">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.00087025">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000102166">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.0003925">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000117">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000046208">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000167083">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.000122333">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.0000835">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000060334">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-07-17T20:01:55.540Z" hostname="Alexanders-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.008664875">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.001064333">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000111958">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.000641667">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.000979666">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.00016925">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000190833">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000081667">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000074583">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.0002165">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.00343375">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.gemini/agents.md: Error: Disk full
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/tools/memoryTool.test.ts:169:49
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.000248167">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.00025575">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000125625">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000175041">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-07-17T20:01:55.541Z" hostname="Alexanders-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.009231958">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.004477791">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.00053875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.000345458">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.0003875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.000329625">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.000853083">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.000350917">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.000481584">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.00050875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.00006425">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000029625">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-07-17T20:01:55.541Z" hostname="Alexanders-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.059215375">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.018437292">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.003677042">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.002671209">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.01864875">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.001909625">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.0016255">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.000911417">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.000725291">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.000895625">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.00116">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error from processSingleFileContent if it fails" time="0.00173625">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.001578792">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.001359667">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should pass offset and limit to processSingleFileContent" time="0.001673417">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.00125825">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-07-17T20:01:55.542Z" hostname="Alexanders-MacBook-Pro.local" tests="22" failures="0" errors="0" skipped="0" time="0.130076333">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.018205333">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.003291667">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.002755458">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.001769125">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.002578375">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.002577834">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.001714042">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.002644708">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.002730875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.01371">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.006071583">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.006016167">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.00422925">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle non-existent specific files gracefully" time="0.003021584">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.009016959">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.004038833">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.0030675">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.003404541">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.017531084">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.01000175">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.005248875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.005346875">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-07-17T20:01:55.543Z" hostname="Alexanders-MacBook-Pro.local" tests="33" failures="0" errors="0" skipped="0" time="0.047657208">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if no restrictions are provided" time="0.000882125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list" time="0.000175917">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is not in the allowed list" time="0.000070625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list" time="0.000107625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is not in the blocked list" time="0.000045708">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in both the allowed and blocked lists" time="0.000090916">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is in coreTools without specific commands" time="0.000102291">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools without specific commands" time="0.000046792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list using the public-facing name" time="0.000212125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list using the public-facing name" time="0.000050042">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools using the public-facing name" time="0.000042792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list using the public-facing name" time="0.000056208">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list" time="0.000046166">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with extra whitespace if it is in the blocked list" time="0.000050291">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is present with specific commands" time="0.000045792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command on the blocklist even with a wildcard allow" time="0.000052">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix" time="0.000036916">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix using the public-facing name" time="0.000032542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that starts with an allowed command prefix but is chained with another command" time="0.00003925">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of an allowed command" time="0.000037625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of a blocked command" time="0.000033334">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a pipe" time="0.00003875">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a semicolon" time="0.000038">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a chained command if any part is blocked" time="0.000039292">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if its prefix is on the blocklist, even if the command itself is on the allowlist" time="0.000041167">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should be case-sensitive in its matching" time="0.000037417">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should correctly handle commands with extra whitespace around chaining operators" time="0.000039">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a chained command if all parts are allowed" time="0.000032416">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with command substitution using backticks" time="0.0000705">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with command substitution using $()" time="0.000032917">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with I/O redirection" time="0.000031667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a double pipe" time="0.000038334">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not let the summarizer override the return display" time="0.04412">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-07-17T20:01:55.545Z" hostname="Alexanders-MacBook-Pro.local" tests="17" failures="0" errors="0" skipped="0" time="0.034999166">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.02403175">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.001230833">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name" time="0.00172875">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should sanitize tool parameters during discovery from command" time="0.002322875">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.00166175">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.000688166">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.000079875">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.00010875">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.000159083">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.000042375">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000061541">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove unsupported format from a simple string property" time="0.00106325">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should NOT remove supported format values" time="0.000276042">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle arrays of objects" time="0.000069292">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle schemas with no properties to sanitize" time="0.000059459">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should not crash on an empty or undefined schema" time="0.0003845">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas with cycles" time="0.000178834">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-07-17T20:01:55.546Z" hostname="Alexanders-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.023250042">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.020823917">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.000579209">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.000123208">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.000940791">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-07-17T20:01:55.546Z" hostname="Alexanders-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.049502875">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.017101042">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.000945792">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001391584">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.000878333">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.001464667">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.0010155">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.000851375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.000828917">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.001038667">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.00522775">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.001971292">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.001378208">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.000797083">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.000951583">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.002578917">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.003151166">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.002087791">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.001639">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.001389667">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.000923042">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.00090675">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-07-17T20:01:55.547Z" hostname="Alexanders-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.008916041">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.001689792">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a subdirectory" time="0.000480166">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore specified directories" time="0.001070625">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect maxDirs limit" time="0.000474208">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect .gitignore files" time="0.004211959">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-07-17T20:01:55.547Z" hostname="Alexanders-MacBook-Pro.local" tests="40" failures="0" errors="0" skipped="0" time="0.014720208">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.000762417">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.000603625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.000079958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.000141166">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.000060958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.000050791">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000071834">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case sensitive" time="0.000039375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.00026825">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.000048458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.000046125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.000038334">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.000044167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.000321833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.000145625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.000052916">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.00003425">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.0000315">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.000060709">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.000035084">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001183334">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000476083">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.000395625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000380791">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.000419416">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.000959875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.000534291">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.000423292">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.000725667">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.000405875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.000331959">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.000694209">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.000350875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.000358292">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 6: Concurrent Edits &gt; Test 6.1: should return early if file was modified by another process" time="0.000628">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.000396459">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.000381667">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.000551">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.000521542">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.00032025">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-07-17T20:01:55.549Z" hostname="Alexanders-MacBook-Pro.local" tests="83" failures="0" errors="0" skipped="0" time="0.012070542">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code&quot; command exists on non-windows" time="0.001800916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code&quot; command does not exist on non-windows" time="0.000102042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code.cmd&quot; command exists on windows" time="0.000232208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code.cmd&quot; command does not exist on windows" time="0.000063709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium&quot; command exists on non-windows" time="0.000199041">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium&quot; command does not exist on non-windows" time="0.000044542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium.cmd&quot; command exists on windows" time="0.000107666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium.cmd&quot; command does not exist on windows" time="0.000037542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on non-windows" time="0.000219084">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on non-windows" time="0.000080416">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on windows" time="0.000103542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on windows" time="0.00004575">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on non-windows" time="0.000054417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on non-windows" time="0.000038875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on windows" time="0.000047459">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on windows" time="0.0000285">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on non-windows" time="0.000241292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on non-windows" time="0.000033042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on windows" time="0.000048834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on windows" time="0.000029708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on non-windows" time="0.000042375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on non-windows" time="0.000029125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on windows" time="0.000039208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on windows" time="0.000033708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on non-windows" time="0.000049083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on non-windows" time="0.000034125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on windows" time="0.000048708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on windows" time="0.0000315">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on non-windows" time="0.000118333">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on windows" time="0.000054833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on non-windows" time="0.000033">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on windows" time="0.000032125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on non-windows" time="0.000029917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on windows" time="0.000030833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on non-windows" time="0.000105167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on windows" time="0.000030167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on non-windows" time="0.000030041">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on windows" time="0.000029291">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000052875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000034459">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.000040542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.000697833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.001246875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.000277541">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000147458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.00008725">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.000072084">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000246375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.0000855">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000066958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000097458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000074292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000390292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000361875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.000349584">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000349709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000210666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000098792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000074041">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000058416">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.000156625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.00007875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000042834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000043875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.00004525">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.000047042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000067">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.000040916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.00003225">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000033625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000032667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000032875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000032708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000037458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.000034542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000055916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000038958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000038417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.000059125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000070916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000058917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.0000505">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.000046125">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-07-17T20:01:55.552Z" hostname="Alexanders-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.006460209">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.001869959">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.000339542">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.000325708">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.002690291">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.000299084">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.000212958">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-07-17T20:01:55.552Z" hostname="Alexanders-MacBook-Pro.local" tests="36" failures="0" errors="0" skipped="0" time="0.053663708">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.001449667">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000405">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.000468625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000339">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.001621375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000516792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.00052125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.000616333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000795625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.000533792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.000540833">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.000393625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.000578625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000523459">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000458583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.000454708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000470167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.001104792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000688584">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000640458">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.000680791">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.000634208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.000587709">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.004577792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000499292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.001330333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.001363416">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.002723208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.002106083">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.003110333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.002154125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.001261334">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.002842">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.003367958">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.00476975">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.006863333">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-07-17T20:01:55.554Z" hostname="Alexanders-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.174428584">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.012807334">
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.005870417">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/flashFallback.integration.test.ts:60:30
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.154736292">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.000412459">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-07-17T20:01:55.554Z" hostname="Alexanders-MacBook-Pro.local" tests="36" failures="0" errors="0" skipped="0" time="0.003854542">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.00071225">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.000058667">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.000075667">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.000144542">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.0000395">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.0000495">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.000032625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.000044541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000169167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.000034666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000030208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000026542">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.000040167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000025042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000025958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000371875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000055083">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000121666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.000037708">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000042958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000044583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000044333">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.000034875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000025333">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000049917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000025042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000072334">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000025166">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000083292">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000035042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.0000355">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000027375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000039916">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000051833">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000033459">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.000067667">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-07-17T20:01:55.555Z" hostname="Alexanders-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.013383459">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.007839584">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.000335125">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.000406208">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.000235667">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.000262167">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.000186625">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.000196083">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.000174416">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.000852834">
            <system-err>
Warning: Could not read directory /nonexistent: ENOENT

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.000286416">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.00027">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should ignore files and folders specified in .gitignore" time="0.001373333">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.000248458">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-07-17T20:01:55.556Z" hostname="Alexanders-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.007993916">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.001915833">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.001281209">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.000783875">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000373417">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.000146542">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.000350791">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.00093625">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.000174959">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.00027625">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.000187209">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000142042">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.000128083">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.000160791">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.000133">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.000189875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-07-17T20:01:55.556Z" hostname="Alexanders-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.016448">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.001573208">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.001270834">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.000411833">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.000398417">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.000582458">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.000404125">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.00114525">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.000409791">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.000601">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY during downward scan" time="0.007858834">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.000522416">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-07-17T20:01:55.557Z" hostname="Alexanders-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.004687958">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.001895334">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.000284167">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000234458">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.000204416">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.000217375">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000125084">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000136167">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.000114042">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000196625">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000091167">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000126916">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000086041">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.000075834">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.00006725">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-07-17T20:01:55.557Z" hostname="Alexanders-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0.011439917">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.003260459">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.000937667">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.001310458">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.000710166">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.000623833">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.000777084">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.000814542">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.0006525">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.000785583">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_GEMINI_FLASH_MODEL" time="0.000750042">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-07-17T20:01:55.558Z" hostname="Alexanders-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.027125875">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.002129583">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.005201583">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:66:21
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.0062015">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:82:21
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.000346708">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.00129425">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.000421209">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.003559916">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:164:21
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.00214275">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:200:22
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:214:22
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.001157833">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.000645542">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.000584875">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.001146709">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.000931041">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:378:36
    at mockCall (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/alexanderhuth/Code/yelm/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/Users/alexanderhuth/Code/yelm/packages/core/[39msrc/utils/retry.test.ts:389:23
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/alexanderhuth/Code/yelm/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-07-17T20:01:55.558Z" hostname="Alexanders-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0.002167042">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.00071975">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.000118708">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.000109417">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.000087792">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.000034709">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.000041">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.000037333">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.000089916">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-07-17T20:01:55.559Z" hostname="Alexanders-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0.009150209">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.002214625">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.000658083">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.000730709">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.001648">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.000631709">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.000676625">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.000658625">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.001044625">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_account.test.ts" timestamp="2025-07-17T20:01:55.559Z" hostname="Alexanders-MacBook-Pro.local" tests="16" failures="0" errors="0" skipped="0" time="0.016400792">
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.002286416">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.001295292">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.001419417">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.00187775">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.000835">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.000274625">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.000549084">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.000776417">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.001426041">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.001134542">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.000299667">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.0005925">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.000641625">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.000479125">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.00059725">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.000895292">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.ts" timestamp="2025-07-17T20:01:55.560Z" hostname="Alexanders-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0.001520209">
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.000941334">
        </testcase>
    </testsuite>
</testsuites>

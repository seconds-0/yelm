{
  "enabled": true,
  "name": "Adversarial Plan Review",
  "description": "Multi-perspective adversarial review of plans and solutions before implementation",
  "version": "1",
  "when": {
    "type": "manual"
  },
  "then": {
    "type": "askAgent",
    "prompt": "Conduct an adversarial review of the current plan or solution using multiple opposing perspectives to identify flaws, risks, and improvements before implementation.\n\n## Adversarial Review Process\n\nYou will review the plan from three different adversarial perspectives, then synthesize the findings:\n\n### Perspective 1: The Optimizer Agent\n**Goal**: Find inefficiencies and over-engineering\n**Questions to Ask:**\n- What parts of this plan are unnecessarily complex?\n- Where are we over-engineering for the current requirements?\n- What simpler approaches could achieve the same goals?\n- What features can be deferred or eliminated?\n- Where are we solving problems that don't exist yet?\n\n### Perspective 2: The Security/Risk Auditor\n**Goal**: Find vulnerabilities and failure modes\n**Questions to Ask:**\n- What are the biggest risks in this approach?\n- Where are the single points of failure?\n- What security vulnerabilities does this introduce?\n- What happens when external dependencies fail?\n- What edge cases could break this solution?\n- What assumptions are we making that might be wrong?\n\n### Perspective 3: The Maintainability Critic\n**Goal**: Find long-term maintenance and scalability issues\n**Questions to Ask:**\n- How difficult will this be to maintain and debug?\n- What happens when requirements change?\n- How will this scale as the codebase grows?\n- What technical debt are we introducing?\n- How easy is it for new team members to understand?\n- What documentation and testing gaps exist?\n\n## Synthesis and Decision\n\nAfter conducting all three adversarial reviews:\n\n### Critical Issues Found:\n- **Optimizer Concerns**: [Over-engineering and complexity issues]\n- **Security/Risk Concerns**: [Vulnerabilities and failure modes]\n- **Maintainability Concerns**: [Long-term sustainability issues]\n\n### Recommended Changes:\n1. **Simplifications**: [Ways to reduce complexity]\n2. **Risk Mitigations**: [How to address security/failure risks]\n3. **Maintainability Improvements**: [Changes for long-term health]\n\n### Final Assessment:\n- **Proceed as planned**: All concerns addressed or acceptable\n- **Revise plan**: Significant issues require changes\n- **Restart planning**: Fundamental flaws require new approach\n\n### Context-Specific Considerations for Yelm:\n- **Performance Impact**: Does this maintain <100ms CLI response?\n- **Context Management**: Does this improve context relevance?\n- **User Experience**: Does this actually help developers?\n- **Integration Complexity**: How does this affect Gemini CLI integration?\n\nUse this adversarial review to catch problems before implementation, not after deployment."
  }
}